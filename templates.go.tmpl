package {{ .PackageName }}

// This package has been automatically generated with temple.
// Do not edit manually!

import (
	"html/template"
)

var (
	Templates = struct{ {{ range .Templates }}
		{{ .VarName }} *template.Template
	{{ end }}}{ {{ range .Templates }}
		{{ .VarName }}: template.Must(template.New("{{ .Name }}").Parse(`{{ .Source }}`)),
	{{ end }}}
	{{ if .Includes }}
	includes = map[string]*template.Template{ {{ range .Includes }}
			"{{ .Name }}": template.Must(template.New("{{ .Name }}").Parse(`{{ .Source }}`)),
	{{ end }}}
	{{ end }}
	{{ if .Layouts }}
	layouts = map[string]*template.Template{ {{ range .Layouts }}
			"{{ .Name }}": template.Must(template.New("{{ .Name }}").Parse(`{{ .Source }}`)),
	{{ end }}}
	{{ end }}
)

{{ if or .Includes .Layouts }}
func init() {
	var err error
	
	{{ if .Includes }}// Add the includes to the parse tree of every other includes
	for includeName, include := range includes {
		for otherName, other := range includes {
			if includeName == otherName {
				continue
			}
			includes[includeName], err = include.AddParseTree(other.Name(), other.Tree)
			if err != nil {
				panic(err)
			}
		}
	}

	// Add the includes to the parse tree of every regular template
	{{ range .Templates }}for _, include := range includes {
		Templates.{{ .VarName }}, err = Templates.{{ .VarName }}.AddParseTree(include.Name(), include.Tree)
		if err != nil {
			panic(err)
		}
	}
	{{ end }}{{ end }}

	{{ if .Layouts }}// Add the layouts to the parse tree of every other layout
	for layoutName, layout := range layouts {
		for otherName, other := range layouts {
			if layoutName == otherName {
				continue
			}
			layouts[layoutName], err = layout.AddParseTree(other.Name(), other.Tree)
			if err != nil {
				panic(err)
			}
		}
	}
	
	// Add the layouts to the parse tree of every regular template
	{{ range .Templates }}for _, layout := range layouts {
		Templates.{{ .VarName }}, err = Templates.{{ .VarName }}.AddParseTree(layout.Name(), layout.Tree)
		if err != nil {
			panic(err)
		}
	}
	{{ end }}{{ end }}

	{{ if and .Layouts .Includes }}// Add the includes to the parse tree of each layout
	for layoutName, layout  := range layouts {
		for _, include := range includes {
			layouts[layoutName], err = layout.AddParseTree(include.Name(), include.Tree)
			if err != nil {
				panic(err)
			}
		}
	}{{ end }}
}
{{ end }}

